// Generated by CoffeeScript 1.6.3
(function() {
  var FUSION_TABLES_URI, build_cts_cite_driver, build_cts_ui, check_table_access, cite_collection, cts_cite_collection_driver_config, default_cts_cite_collection_driver_config, delete_cookie, expires_in_to_date, filter_url_params, fusion_tables_escape, fusion_tables_query, get_cite_collection, get_cookie, get_valid_reff, get_valid_reff_xml_to_urn_list, google_oauth_parameters_for_fusion_tables, google_oauth_url, parse_query_string, set_access_token_cookie, set_author_name, set_cookie, set_cookie_expiration_callback, urn_to_id, valid_urns;

  FUSION_TABLES_URI = 'https://www.googleapis.com/fusiontables/v1';

  cts_cite_collection_driver_config = {};

  valid_urns = [];

  cite_collection = {};

  default_cts_cite_collection_driver_config = {
    google_client_id: '429515988667-jkk0s2375vu04vasnvpotbimddag4ih8.apps.googleusercontent.com',
    google_scope: 'https://www.googleapis.com/auth/fusiontables https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email',
    cts_endpoint: 'http://www.perseus.tufts.edu/hopper/CTS',
    cts_urn: 'urn:cts:greekLit:tlg1389.tlg001.perseus-grc1',
    cite_table_id: '11_Igu6u5961Dkz-cfbJOgKdYkQMwnoe3AQXw8T-K',
    cite_collection_editor_url: 'http://localhost:4001/'
  };

  google_oauth_parameters_for_fusion_tables = {
    response_type: 'token',
    redirect_uri: window.location.href.replace("" + location.hash, ''),
    approval_prompt: 'auto'
  };

  google_oauth_url = function() {
    return "https://accounts.google.com/o/oauth2/auth?" + ($.param(google_oauth_parameters_for_fusion_tables));
  };

  urn_to_id = function(urn) {
    return urn.replace(/[:.-]/g, '_');
  };

  build_cts_ui = function() {
    var request_url, urn, urn_li, _i, _len, _results;
    $('body').append($('<ul id="valid_urns">'));
    _results = [];
    for (_i = 0, _len = valid_urns.length; _i < _len; _i++) {
      urn = valid_urns[_i];
      urn_li = $('<li>').attr('id', urn_to_id(urn)).text(urn);
      $('#valid_urns').append(urn_li);
      if (urn === 'urn:cts:greekLit:tlg1389.tlg001.perseus-grc1:a.habaris') {
        request_url = "" + cts_cite_collection_driver_config['cts_endpoint'] + "?" + ($.param({
          request: 'GetPassage',
          urn: urn
        }));
        _results.push($.ajax(request_url, {
          type: 'GET',
          dataType: 'xml',
          crossDomain: 'true',
          error: function(jqXHR, textStatus, errorThrown) {
            return console.log("AJAX Error: " + textStatus);
          },
          success: function(data) {
            var entry, request_urn, tei_document, urn_selector;
            console.log(data);
            tei_document = $($($(data)[0]).children('TEI')[0]);
            request_urn = tei_document.find('requestUrn').text();
            entry = tei_document.find('div[type="entry"]');
            urn_selector = "li#" + (urn_to_id(request_urn));
            return $(urn_selector).append(entry);
          }
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  get_cite_collection = function(callback) {
    console.log('get_cite_collection');
    return fusion_tables_query("SELECT * FROM " + cts_cite_collection_driver_config['cite_table_id'], function(fusion_tables_result) {
      cite_collection = fusion_tables_result;
      if (callback != null) {
        return callback();
      }
    });
  };

  get_valid_reff_xml_to_urn_list = function(xml) {
    var chunk, leaf_nodes, _i, _len, _results;
    leaf_nodes = $(xml).find('chunk').filter(function(index) {
      return ($(this).children('chunk').length) === 0;
    });
    _results = [];
    for (_i = 0, _len = leaf_nodes.length; _i < _len; _i++) {
      chunk = leaf_nodes[_i];
      _results.push("" + cts_cite_collection_driver_config['cts_urn'] + ":" + ($(chunk).parents('chunk').map(function(index) {
        return $(this).attr('n');
      }).toArray().join('.')) + "." + ($(chunk).attr('n')));
    }
    return _results;
  };

  get_valid_reff = function(urn, callback) {
    var request_url;
    if (callback == null) {
      callback = null;
    }
    console.log('get_valid_reff');
    request_url = "" + cts_cite_collection_driver_config['cts_endpoint'] + "?" + ($.param({
      request: 'GetValidReff',
      urn: urn
    }));
    console.log(request_url);
    return $.ajax(request_url, {
      type: 'GET',
      dataType: 'xml',
      crossDomain: true,
      error: function(jqXHR, textStatus, errorThrown) {
        return console.log("AJAX Error: " + textStatus);
      },
      success: function(data) {
        console.log(data);
        valid_urns = get_valid_reff_xml_to_urn_list($($(data)[0]).children('contents')[0]);
        console.log(valid_urns.length);
        if (callback != null) {
          return callback();
        }
      }
    });
  };

  check_table_access = function(table_id, callback) {
    if (get_cookie('access_token')) {
      return $.ajax("" + FUSION_TABLES_URI + "/tables/" + table_id + "?access_token=" + (get_cookie('access_token')), {
        type: 'GET',
        dataType: 'json',
        crossDomain: true,
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("AJAX Error: " + textStatus);
        },
        success: function(data) {
          return console.log(data);
        },
        complete: function(jqXHR, textStatus) {
          if (callback != null) {
            return callback();
          }
        }
      });
    }
  };

  fusion_tables_escape = function(value) {
    return "'" + (value.replace(/'/g, "\\\'")) + "'";
  };

  fusion_tables_query = function(query, callback) {
    console.log("Query: " + query);
    switch (query.split(' ')[0]) {
      case 'INSERT':
        return $.ajax("" + FUSION_TABLES_URI + "/query?access_token=" + (get_cookie('access_token')), {
          type: 'POST',
          dataType: 'json',
          crossDomain: true,
          data: {
            sql: query
          },
          error: function(jqXHR, textStatus, errorThrown) {
            console.log("AJAX Error: " + textStatus);
            $('#collection_form').after($('<div>').attr('class', 'alert alert-error').attr('id', 'submit_error').append("Error submitting data: " + textStatus));
            scroll_to_bottom();
            return $('#submit_error').delay(1800).fadeOut(1800, function() {
              $(this).remove();
              return $('#collection_select').change();
            });
          },
          success: function(data) {
            console.log(data);
            if (callback != null) {
              return callback(data);
            }
          }
        });
      case 'SELECT':
        return $.ajax("" + FUSION_TABLES_URI + "/query?sql=" + query + "&access_token=" + (get_cookie('access_token')), {
          type: 'GET',
          cache: false,
          dataType: 'json',
          crossDomain: true,
          error: function(jqXHR, textStatus, errorThrown) {
            return console.log("AJAX Error: " + textStatus);
          },
          success: function(data) {
            console.log(data);
            if (callback != null) {
              return callback(data);
            }
          }
        });
    }
  };

  set_author_name = function(callback) {
    if (get_cookie('author_name')) {
      $('input[data-type=authuser]').attr('value', get_cookie('author_name'));
      return $('input[data-type=authuser]').prop('disabled', true);
    } else if (get_cookie('access_token')) {
      return $.ajax("https://www.googleapis.com/oauth2/v1/userinfo?access_token=" + (get_cookie('access_token')), {
        type: 'GET',
        dataType: 'json',
        crossDomain: true,
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("AJAX Error: " + textStatus);
        },
        success: function(data) {
          set_cookie('author_name', "" + data['name'] + " <" + data['email'] + ">", 3600);
          $('input[data-type=authuser]').attr('value', get_cookie('author_name'));
          return $('input[data-type=authuser]').prop('disabled', true);
        },
        complete: function(jqXHR, textStatus) {
          if (callback != null) {
            return callback();
          }
        }
      });
    }
  };

  parse_query_string = function(query_string) {
    var m, params, regex;
    if (query_string == null) {
      query_string = location.hash.substring(1);
    }
    params = {};
    if (query_string.length > 0) {
      regex = /([^&=]+)=([^&]*)/g;
      while (m = regex.exec(query_string)) {
        params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
      }
    }
    return params;
  };

  filter_url_params = function(params, filtered_params) {
    var hash_string, key, rewritten_params, value;
    rewritten_params = [];
    if (filtered_params == null) {
      filtered_params = ['access_token', 'expires_in', 'token_type'];
    }
    for (key in params) {
      value = params[key];
      if (!_.include(filtered_params, key)) {
        rewritten_params.push("" + key + "=" + value);
      }
    }
    if (rewritten_params.length > 0) {
      hash_string = "#" + (rewritten_params.join('&'));
    } else {
      hash_string = '';
    }
    history.replaceState(null, '', window.location.href.replace("" + location.hash, hash_string));
    return params;
  };

  expires_in_to_date = function(expires_in) {
    var cookie_expires;
    cookie_expires = new Date;
    cookie_expires.setTime(cookie_expires.getTime() + expires_in * 1000);
    return cookie_expires;
  };

  set_cookie = function(key, value, expires_in) {
    var cookie;
    cookie = "" + key + "=" + value + "; ";
    cookie += "expires=" + (expires_in_to_date(expires_in).toUTCString()) + "; ";
    cookie += "path=" + (window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1));
    return document.cookie = cookie;
  };

  delete_cookie = function(key) {
    return set_cookie(key, null, -1);
  };

  get_cookie = function(key) {
    var cookie_fragment, _i, _len, _ref;
    key += "=";
    _ref = document.cookie.split(';');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cookie_fragment = _ref[_i];
      cookie_fragment = cookie_fragment.replace(/^\s+/, '');
      if (cookie_fragment.indexOf(key) === 0) {
        return cookie_fragment.substring(key.length, cookie_fragment.length);
      }
    }
    return null;
  };

  set_access_token_cookie = function(params, callback) {
    console.log('set_access_token_cookie');
    if (params['state'] != null) {
      console.log("Replacing hash with state: " + params['state']);
      history.replaceState(null, '', window.location.href.replace("" + location.hash, "#" + params['state']));
    }
    if (params['access_token'] != null) {
      return $.ajax("https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + params['access_token'], {
        type: 'GET',
        dataType: 'json',
        crossDomain: true,
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Access Token Validation Error: " + textStatus);
        },
        success: function(data) {
          set_cookie('access_token', params['access_token'], params['expires_in']);
          set_cookie('access_token_expires_at', expires_in_to_date(params['expires_in']).getTime(), params['expires_in']);
          return $('#collection_select').change();
        },
        complete: function(jqXHR, textStatus) {
          if (callback != null) {
            return callback();
          }
        }
      });
    } else {
      if (callback != null) {
        return callback();
      }
    }
  };

  set_cookie_expiration_callback = function() {
    var expires_in;
    if (get_cookie('access_token_expires_at')) {
      expires_in = get_cookie('access_token_expires_at') - (new Date()).getTime();
      console.log(expires_in);
      return setTimeout((function() {
        console.log("cookie expired");
        return window.location.reload();
      }), expires_in);
    }
  };

  build_cts_cite_driver = function() {
    var _this = this;
    console.log('build');
    if (get_cookie('access_token')) {
      set_cookie_expiration_callback();
      return get_valid_reff(cts_cite_collection_driver_config['cts_urn'], function() {
        return get_cite_collection(build_cts_ui);
      });
    } else {
      return window.location = google_oauth_url();
    }
  };

  $(document).ready(function() {
    console.log('ready');
    cts_cite_collection_driver_config = $.extend({}, default_cts_cite_collection_driver_config, window.cts_cite_collection_driver_config);
    google_oauth_parameters_for_fusion_tables['client_id'] = cts_cite_collection_driver_config['google_client_id'];
    google_oauth_parameters_for_fusion_tables['scope'] = cts_cite_collection_driver_config['google_scope'];
    return set_access_token_cookie(filter_url_params(parse_query_string()), build_cts_cite_driver);
  });

}).call(this);
